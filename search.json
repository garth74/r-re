[{"path":"https://pythonicr.github.io/re/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 re authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://pythonicr.github.io/re/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Garrett Shipley. Author, maintainer.","code":""},{"path":"https://pythonicr.github.io/re/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Shipley G (2024). re: Python-ish regular expressions R. R package version 0.0.1, https://github.com/pythonicr/re, https://pythonicr.github.io/re.","code":"@Manual{,   title = {re: Python-ish regular expressions in R},   author = {Garrett Shipley},   year = {2024},   note = {R package version 0.0.1, https://github.com/pythonicr/re},   url = {https://pythonicr.github.io/re}, }"},{"path":"https://pythonicr.github.io/re/index.html","id":"re","dir":"","previous_headings":"","what":"Python-ish regular expressions in R","title":"Python-ish regular expressions in R","text":"package aims provide functions similar re package Python.","code":""},{"path":"https://pythonicr.github.io/re/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Python-ish regular expressions in R","text":"package isn’t CRAN, can install using remotes. remotes::install_github(\"pythonicr/re\")","code":""},{"path":"https://pythonicr.github.io/re/index.html","id":"todo","dir":"","previous_headings":"","what":"Todo","title":"Python-ish regular expressions in R","text":"compile escape findall finditer fullmatch match purge search split sub subn","code":""},{"path":"https://pythonicr.github.io/re/reference/re_compile.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile a regular expression with specific flags — re_compile","title":"Compile a regular expression with specific flags — re_compile","text":"re_compile compiles regular expression pattern specified flags. function allows setting various flags akin regex modifiers programming languages like Python. flags control various aspects pattern matching. function really just way set flag arguments constant variable.","code":""},{"path":"https://pythonicr.github.io/re/reference/re_compile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile a regular expression with specific flags — re_compile","text":"","code":"re_compile(pattern, IGNORECASE, I, MULTILINE, M, DOTALL, S, VERBOSE, X, NOFLAG)"},{"path":"https://pythonicr.github.io/re/reference/re_compile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compile a regular expression with specific flags — re_compile","text":"pattern regular expression pattern compiled. IGNORECASE Flag indicate case-insensitive matching. Abbreviation IGNORECASE. MULTILINE Flag indicate multi-line matching, ^ $ match start end line. M Abbreviation MULTILINE. DOTALL Flag indicate . (dot) match character including newline. S Abbreviation DOTALL VERBOSE Flag allow verbose regex syntax, can include comments whitespace readability. X Abbreviation VERBOSE NOFLAG Flag indicate flags set.","code":""},{"path":"https://pythonicr.github.io/re/reference/re_compile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile a regular expression with specific flags — re_compile","text":"object class \"Pattern\" representing compiled regular expression specified flags.","code":""},{"path":[]},{"path":"https://pythonicr.github.io/re/reference/re_compile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compile a regular expression with specific flags — re_compile","text":"","code":"pattern <- re_compile(\"^abc\", IGNORECASE) pattern <- re_compile(\"end$\", M = TRUE) pattern <- re_compile(\"a.b\", DOTALL = TRUE)"},{"path":"https://pythonicr.github.io/re/reference/re_contains.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if string contains a regular expression — re_contains","title":"Check if string contains a regular expression — re_contains","text":"re_contains checks whether specified pattern (regular expression) found within element character vector. provided pattern already compiled pattern object, compiles using re_compile.","code":""},{"path":"https://pythonicr.github.io/re/reference/re_contains.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if string contains a regular expression — re_contains","text":"","code":"re_contains(pattern, string, ...)"},{"path":"https://pythonicr.github.io/re/reference/re_contains.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if string contains a regular expression — re_contains","text":"pattern regular expression pattern compiled pattern object. string character vector element string checked pattern. ... Arguments passed re_compile IGNORECASE Flag indicate case-insensitive matching. Abbreviation IGNORECASE. MULTILINE Flag indicate multi-line matching, ^ $ match start end line. M Abbreviation MULTILINE. DOTALL Flag indicate . (dot) match character including newline. S Abbreviation DOTALL VERBOSE Flag allow verbose regex syntax, can include comments whitespace readability. X Abbreviation VERBOSE NOFLAG Flag indicate flags set.","code":""},{"path":"https://pythonicr.github.io/re/reference/re_contains.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if string contains a regular expression — re_contains","text":"logical vector length string, indicating whether element contains match pattern.","code":""},{"path":"https://pythonicr.github.io/re/reference/re_contains.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if string contains a regular expression — re_contains","text":"","code":"pattern <- re_compile(\"^abc\", IGNORECASE) re_contains(pattern, \"Abcdef\") #> [1] TRUE re_contains(\"xyz$\", \"hello world xyz\") #> [1] TRUE"},{"path":"https://pythonicr.github.io/re/reference/re_escape.html","id":null,"dir":"Reference","previous_headings":"","what":"Escape special characters — re_escape","title":"Escape special characters — re_escape","text":"re_escape escapes special characters regular expression string. function useful want treat string literally regular expression context, escaping characters otherwise interpreted special regex operators.","code":""},{"path":"https://pythonicr.github.io/re/reference/re_escape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Escape special characters — re_escape","text":"","code":"re_escape(pattern)"},{"path":"https://pythonicr.github.io/re/reference/re_escape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Escape special characters — re_escape","text":"pattern character vector element string special regex characters escaped.","code":""},{"path":"https://pythonicr.github.io/re/reference/re_escape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Escape special characters — re_escape","text":"character vector length pattern, element special regex characters escaped.","code":""},{"path":[]},{"path":"https://pythonicr.github.io/re/reference/re_escape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Escape special characters — re_escape","text":"","code":"re_escape(\"a[bc].*d?\") #> [1] \"a\\\\[bc\\\\]\\\\.\\\\*d\\\\?\" re_escape(\".^$|*+?{}[]()\") #> [1] \"\\\\.\\\\^\\\\$\\\\|\\\\*\\\\+\\\\?\\\\{\\\\}\\\\[\\\\]\\\\(\\\\)\""},{"path":"https://pythonicr.github.io/re/reference/re_findall.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract all occurrences of a pattern in a string — re_findall","title":"Extract all occurrences of a pattern in a string — re_findall","text":"re_findall extracts occurrences specified pattern (regular expression) element character vector. provided pattern already compiled pattern object, compiles using re_compile.","code":""},{"path":"https://pythonicr.github.io/re/reference/re_findall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract all occurrences of a pattern in a string — re_findall","text":"","code":"re_findall(pattern, string, ...)"},{"path":"https://pythonicr.github.io/re/reference/re_findall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract all occurrences of a pattern in a string — re_findall","text":"pattern regular expression pattern compiled pattern object. string character vector element string extract matches pattern. ... Arguments passed re_compile IGNORECASE Flag indicate case-insensitive matching. Abbreviation IGNORECASE. MULTILINE Flag indicate multi-line matching, ^ $ match start end line. M Abbreviation MULTILINE. DOTALL Flag indicate . (dot) match character including newline. S Abbreviation DOTALL VERBOSE Flag allow verbose regex syntax, can include comments whitespace readability. X Abbreviation VERBOSE NOFLAG Flag indicate flags set.","code":""},{"path":"https://pythonicr.github.io/re/reference/re_findall.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract all occurrences of a pattern in a string — re_findall","text":"list character vectors, vector contains matches found corresponding element string.","code":""},{"path":[]},{"path":"https://pythonicr.github.io/re/reference/re_findall.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract all occurrences of a pattern in a string — re_findall","text":"","code":"pattern <- re_compile(\"\\\\b\\\\w+\\\\b\") re_findall(pattern, \"This is a test.\") # Extracts all words #> [[1]] #> [1] \"This\" \"is\"   \"a\"    \"test\" #>  re_findall(\"\\\\d+\", \"123 abc 456\") #> [[1]] #> [1] \"123\" \"456\" #>"},{"path":"https://pythonicr.github.io/re/reference/re_fullmatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Match a pattern against the entire string — re_fullmatch","title":"Match a pattern against the entire string — re_fullmatch","text":"re_fullmatch checks whether element character vector fully matches specified pattern (regular expression). provided pattern already compiled pattern object, compiles using re_compile. function ensures entire string matches pattern start end.","code":""},{"path":"https://pythonicr.github.io/re/reference/re_fullmatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match a pattern against the entire string — re_fullmatch","text":"","code":"re_fullmatch(pattern, string, ...)"},{"path":"https://pythonicr.github.io/re/reference/re_fullmatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match a pattern against the entire string — re_fullmatch","text":"pattern regular expression pattern compiled pattern object. string character vector element string matched pattern. ... Additional arguments passed re_compile pattern needs compiled.","code":""},{"path":"https://pythonicr.github.io/re/reference/re_fullmatch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match a pattern against the entire string — re_fullmatch","text":"list element character vector containing full match corresponding element string, character(0) match. #' @inheritDotParams re_compile","code":""},{"path":[]},{"path":"https://pythonicr.github.io/re/reference/re_fullmatch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match a pattern against the entire string — re_fullmatch","text":"","code":"pattern <- re_compile(\"\\\\d{3}-\\\\d{2}-\\\\d{4}\") re_fullmatch(pattern, \"123-45-6789\") # Full match #> [[1]] #> [1] \"123-45-6789\" #>  re_fullmatch(\"123-45-6789\", \"123-45-6789 and more\") # No full match #> [[1]] #> [1] NA #>"},{"path":"https://pythonicr.github.io/re/reference/re_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Match a pattern at the start of a string — re_match","title":"Match a pattern at the start of a string — re_match","text":"re_match checks whether element character vector matches specified pattern (regular expression) start. provided pattern already compiled pattern object, compiles using re_compile. function ensures matching occurs beginning string.","code":""},{"path":"https://pythonicr.github.io/re/reference/re_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match a pattern at the start of a string — re_match","text":"","code":"re_match(pattern, string, ...)"},{"path":"https://pythonicr.github.io/re/reference/re_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match a pattern at the start of a string — re_match","text":"pattern regular expression pattern compiled pattern object. string character vector element string matched pattern beginning. ... Arguments passed re_compile IGNORECASE Flag indicate case-insensitive matching. Abbreviation IGNORECASE. MULTILINE Flag indicate multi-line matching, ^ $ match start end line. M Abbreviation MULTILINE. DOTALL Flag indicate . (dot) match character including newline. S Abbreviation DOTALL VERBOSE Flag allow verbose regex syntax, can include comments whitespace readability. X Abbreviation VERBOSE NOFLAG Flag indicate flags set.","code":""},{"path":"https://pythonicr.github.io/re/reference/re_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match a pattern at the start of a string — re_match","text":"list element character vector containing match found start corresponding element string, character(0) match start.","code":""},{"path":[]},{"path":"https://pythonicr.github.io/re/reference/re_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match a pattern at the start of a string — re_match","text":"","code":"pattern <- re_compile(\"\\\\d{3}\") re_match(pattern, \"123abc\") #> [[1]] #> [1] \"123\" #>  re_match(\"abc\", \"xyzabc\") #> [[1]] #> [1] NA #>"},{"path":"https://pythonicr.github.io/re/reference/re_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for a pattern in a string — re_search","title":"Search for a pattern in a string — re_search","text":"re_search searches occurrences specified pattern (regular expression) within element character vector. provided pattern already compiled pattern object, compiles using re_compile.","code":""},{"path":"https://pythonicr.github.io/re/reference/re_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for a pattern in a string — re_search","text":"","code":"re_search(pattern, string, ...)"},{"path":"https://pythonicr.github.io/re/reference/re_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for a pattern in a string — re_search","text":"pattern regular expression pattern compiled pattern object. string character vector element string search pattern. ... Arguments passed re_compile IGNORECASE Flag indicate case-insensitive matching. Abbreviation IGNORECASE. MULTILINE Flag indicate multi-line matching, ^ $ match start end line. M Abbreviation MULTILINE. DOTALL Flag indicate . (dot) match character including newline. S Abbreviation DOTALL VERBOSE Flag allow verbose regex syntax, can include comments whitespace readability. X Abbreviation VERBOSE NOFLAG Flag indicate flags set.","code":""},{"path":"https://pythonicr.github.io/re/reference/re_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for a pattern in a string — re_search","text":"list element character vector containing matches found corresponding element string. matches found, element character(0).","code":""},{"path":[]},{"path":"https://pythonicr.github.io/re/reference/re_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for a pattern in a string — re_search","text":"","code":"pattern <- re_compile(\"\\\\d+\") re_search(pattern, \"abc 123 xyz\") # Finds \"123\" #> [[1]] #> [1] \"123\" #>  re_search(\"\\\\bword\\\\b\", \"A sentence with the word.\") # Finds \"word\" #> [[1]] #> [1] \"word\" #>"},{"path":"https://pythonicr.github.io/re/reference/re_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a string by a regular expression pattern — re_split","title":"Split a string by a regular expression pattern — re_split","text":"re_split splits element character vector substrings based specified pattern (regular expression). provided pattern already compiled pattern object, compiles using re_compile. function allows controlling maximum number splits performed.","code":""},{"path":"https://pythonicr.github.io/re/reference/re_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a string by a regular expression pattern — re_split","text":"","code":"re_split(pattern, string, ..., maxsplit = -1L)"},{"path":"https://pythonicr.github.io/re/reference/re_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a string by a regular expression pattern — re_split","text":"pattern regular expression pattern compiled pattern object. string character vector element string split. ... Arguments passed re_compile IGNORECASE Flag indicate case-insensitive matching. Abbreviation IGNORECASE. MULTILINE Flag indicate multi-line matching, ^ $ match start end line. M Abbreviation MULTILINE. DOTALL Flag indicate . (dot) match character including newline. S Abbreviation DOTALL VERBOSE Flag allow verbose regex syntax, can include comments whitespace readability. X Abbreviation VERBOSE NOFLAG Flag indicate flags set. maxsplit maximum number splits perform string. -1L (default), possible splits performed.","code":""},{"path":"https://pythonicr.github.io/re/reference/re_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a string by a regular expression pattern — re_split","text":"list character vectors, vector contains substrings resulting splitting corresponding element string.","code":""},{"path":[]},{"path":"https://pythonicr.github.io/re/reference/re_split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a string by a regular expression pattern — re_split","text":"","code":"pattern <- re_compile(\"\\\\s+\") re_split(pattern, \"Split this string\") # Splits on whitespace #> [[1]] #> [1] \"Split\"  \"this\"   \"string\" #>  re_split(\"\\\\W+\", \"Split,with!punctuation.morestuff\", maxsplit = 2) #> [[1]] #> [1] \"Split\"                 \"with\"                  \"punctuation.morestuff\" #>"},{"path":"https://pythonicr.github.io/re/reference/re_sub.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitute occurrences of a pattern in a string — re_sub","title":"Substitute occurrences of a pattern in a string — re_sub","text":"re_sub replaces occurrences specified pattern (regular expression) element character vector replacement string. provided pattern already compiled pattern object, compiles using re_compile.","code":""},{"path":"https://pythonicr.github.io/re/reference/re_sub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitute occurrences of a pattern in a string — re_sub","text":"","code":"re_sub(pattern, replacement, string, ...)"},{"path":"https://pythonicr.github.io/re/reference/re_sub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitute occurrences of a pattern in a string — re_sub","text":"pattern regular expression pattern compiled pattern object. replacement replacement string. string character vector element string pattern replaced. ... Arguments passed re_compile IGNORECASE Flag indicate case-insensitive matching. Abbreviation IGNORECASE. MULTILINE Flag indicate multi-line matching, ^ $ match start end line. M Abbreviation MULTILINE. DOTALL Flag indicate . (dot) match character including newline. S Abbreviation DOTALL VERBOSE Flag allow verbose regex syntax, can include comments whitespace readability. X Abbreviation VERBOSE NOFLAG Flag indicate flags set.","code":""},{"path":"https://pythonicr.github.io/re/reference/re_sub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substitute occurrences of a pattern in a string — re_sub","text":"character vector length string, occurrences pattern replaced replacement element.","code":""},{"path":[]},{"path":"https://pythonicr.github.io/re/reference/re_sub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Substitute occurrences of a pattern in a string — re_sub","text":"","code":"pattern <- re_compile(\"\\\\d+\") re_sub(pattern, \"number\", \"Replace 123 with text.\") # Replaces \"123\" with \"number\" #> [1] \"Replace number with text.\" re_sub(\"\\\\s+\", \"-\", \"Split and join\") # Replaces spaces with hyphens #> [1] \"Split-and-join\""}]
